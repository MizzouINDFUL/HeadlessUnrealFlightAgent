---
# Config file for Unreal Launcher Flight Simulator
session:
  basename: "Blocks" #base name for a tmux session
  max: 10 #max number of tmux sessions with that basename - experimental stuff for parallel runs
  start_life: 1
  end_life: 4
  max_lives: 100
  skip_pulgin_install: false
  auto_attach: true
  target_is_time: false
  target: 20

unreal:
  user: "" #useful for when the entire solutions is execcuted from inside a docker container. Unreal won't let you compile if you're root so you may use this to change to ue4 user
  start_game: true #start game after launching the editor automatically
  use_docker: false #use docker to run the editor - otherwise will use the local copy of the engine
  docker_image: "ghcr.io/epicgames/unreal-engine:dev-5.1.0"
  local_path: "/home/mindful/EpicGames/UE5.1"
  project_path: "/home/mindful/Documents/UnrealProjects/Blocks"
  # actors_to_tag: "ASplineCar7:car"
  arguments: #arguments passed to UnrealEditor-Cmd.sh
    # - RenderOffscreen #render offscreen aka headless
    - imgOutputX: 2048 #resolution of the output image
    - imgOutputY: 1024
    - logcmds: "LogDerivedDataCacheVerbose"
    - levels_to_load: "1:/Game/FlyingCPP/Maps/FlyingExampleMap+3:/Game/FlyingCPP/Maps/FlyingExampleMap2" #Explanation: starting from life 1 load FlyingExampleMap, starting from life 3 load FlyingExampleMap2
    - layers_to_export: "/Engine/BufferVisualization/FinalImage.FinalImage+/MindfulPlugin/MRQ/MRQ_StencilMask.MRQ_StencilMask+/Engine/BufferVisualization/SceneDepth.SceneDepth"
    # - layers_to_export: "/Engine/BufferVisualization/FinalImage.FinalImage+/Engine/BufferVisualization/SceneDepth.SceneDepth"
    - topic_to_layer: "/unreal_ros/image_color:FinalImage+/unreal_ros/ground_truth_color:FinalImageMRQ_StencilMask+/unreal_ros/image_depth:FinalImageSceneDepth"
    - ground_truth: "ASplineCar7:car"
    - num_frames: 20
    - session_name: :{sessionname}
    - tellunreal_listen_port: :{ports_to_reserve.tellunreal_listener}
    - rosbridge_port: :{ports_to_reserve.rosbridge_listener}
      # The following is the set of arguments you want to include when you want to "cache" the contents of Unreal project.
      # This will speed up the simulation by not having to recompile shaders and other assets every time.
      # - run: "DerivedDataCache"
      # - fill
      # - DDC: "CreatePak"
      
simulation:
  start_airsim: true
  num_lives: 3
  target_is_time: false #if false, we count frames instead of seconds
  target: 20
  record_delay: 0 #delay before starting to record
  tags_to_track: "car"
  extract_on_end: true
ros:
  enable: true
  use_docker: true
  enable_rosbag: true
  extract_bags: true
  docker_image: "unreal-launcher-airsim-ros"
  local_path: "/opt/ros/noetic/"
#this one doesn't need to run anything specific locally but we assume you have access to AirSim's Python API on the host machine
airsim:
  enable: true
  use_docker: true
  docker_image: "unreal-launcher-airsim-ros"
yolo:
  enable: false
  use_docker: true
  docker_image: "ultralytics/ultralytics"
  
#a list of ports to reserve for the listeners
ports_to_reserve:
  - tellunreal_listener
  - life_restart_listener
  - rosbag_extraction_listener
  - rosbridge_listener
  - airsim_api

script_bindings:
  "External Command Line object is initialized":
    - script: "src/scripts/unreal/start_tellunreal.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: false
    - script: "src/scripts/unreal/init_viewport_capture.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: false

  "BEGIN EXPERIMENT":
    - script: "src/scripts/unreal/try_load_map.sh"
      clear_logs_on_complete: true
      auto_rebind_after_each_life: true

  "READY TO START SIM":
    - script: "src/scripts/start_rosbag.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: true
    - script: "src/scripts/unreal/start_game.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: true

  #This is right after we confirm that the game has started
  "Bringing up level for play took":
    - script: "src/scripts/unreal/start_airsim.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: true
    - script: "src/scripts/unreal/post_start_game.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: true
    - script: "src/scripts/listen_restart_signal.sh"
      clear_logs_on_complete: false
      auto_rebind_after_each_life: true

  "MRQ SIM FINISHED":
    script: "src/scripts/unreal/mrq_done.sh"
    clear_logs_on_complete: true
    auto_rebind_after_each_life: true

#similar to script bindings, but will take a 'command' instead of 'script'. 
#Command will be sent to unreal's cmd directly using src/scripts/unreal/send_to_unreal.py
# unreal_cmd_bindings:
#   "READY TO START SIM":
#     command: "py print('Viewport capture ready')"
#     clear_logs_on_complete: false
#     auto_rebind_after_each_life: true

